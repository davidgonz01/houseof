/* The following code was generated by JFlex 1.4.3 on 06/05/15 11:02 AM */

/*
 * JFlex specification for the lexical analyzer for a simple demo language.
 * Change this into the scanner for your implementation of MiniJ.
 */


package Scanner;

import java_cup.runtime.*;
import Parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/05/15 11:02 AM from the specification file
 * <tt>src/Scanner/minij.jflex</tt>
 */
public final class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\47\4\0\1\45"+
    "\1\0\1\50\1\51\1\6\1\40\1\57\1\42\1\36\1\4\1\7"+
    "\11\1\1\0\1\54\1\43\1\41\1\44\2\0\22\2\1\34\7\2"+
    "\1\55\1\0\1\56\1\0\1\60\1\0\1\15\1\24\1\25\1\10"+
    "\1\27\1\32\1\35\1\33\1\11\2\2\1\14\1\17\1\30\1\20"+
    "\1\13\1\2\1\21\1\12\1\22\1\23\1\26\1\31\1\37\1\16"+
    "\1\2\1\52\1\46\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\20\3\1\7\1\10\1\11\1\12\1\13\1\14\2\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\0\4\3\1\26\24\3\1\27\1\30\1\31"+
    "\1\0\3\3\1\32\16\3\1\33\2\3\1\34\2\3"+
    "\1\31\7\3\1\35\1\3\1\36\1\37\2\3\1\40"+
    "\1\41\1\3\1\42\15\3\1\43\1\3\1\44\1\45"+
    "\3\3\1\46\1\47\1\50\1\3\1\51\1\52\1\53"+
    "\3\3\1\54\1\55\1\56\1\57\1\60\13\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\61\0\61"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\u0436\0\u0467"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\223"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\61\0\61\0\61\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\223\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\223\0\u0d04\0\u0d35\0\223\0\u0d66\0\u0d97"+
    "\0\u04c9\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\223\0\u0f1f\0\223\0\223\0\u0f50\0\u0f81\0\223\0\223"+
    "\0\u0fb2\0\223\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\223"+
    "\0\u1260\0\223\0\223\0\u1291\0\u12c2\0\u12f3\0\223\0\223"+
    "\0\223\0\u1324\0\223\0\223\0\223\0\u1355\0\u1386\0\u13b7"+
    "\0\223\0\223\0\223\0\223\0\223\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\4\1\16\1\4"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\4\1\30\1\4\1\31\1\4\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\2"+
    "\62\0\1\3\5\0\1\3\52\0\2\4\4\0\27\4"+
    "\1\0\1\4\20\0\1\4\3\0\1\5\1\0\1\5"+
    "\57\0\1\52\1\0\1\53\53\0\2\4\4\0\2\4"+
    "\1\54\6\4\1\55\15\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\10\4\1\56\10\4\1\57\1\4"+
    "\1\60\3\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\13\4\1\61\13\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\12\4\1\62\1\4\1\63\12\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\20\4"+
    "\1\64\6\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\6\4\1\65\20\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\20\4\1\66\6\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\12\4\1\67\11\4"+
    "\1\70\2\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\11\4\1\71\15\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\5\4\1\72\21\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\11\4\1\73\15\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\5\4"+
    "\1\74\21\4\1\0\1\75\20\0\1\4\1\0\2\4"+
    "\4\0\14\4\1\76\3\4\1\77\6\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\24\4\1\100\2\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\6\4"+
    "\1\101\2\4\1\102\15\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\7\4\1\103\3\4\1\104\13\4"+
    "\1\0\1\4\20\0\1\4\45\0\1\105\61\0\1\106"+
    "\12\0\5\52\1\107\53\52\5\53\1\0\1\110\52\53"+
    "\1\0\2\4\4\0\3\4\1\111\23\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\14\4\1\112\12\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\4\4"+
    "\1\113\22\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\13\4\1\114\13\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\6\4\1\115\20\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\2\4\1\116\24\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\15\4"+
    "\1\117\11\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\21\4\1\120\5\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\2\4\1\121\24\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\13\4\1\122\13\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\14\4"+
    "\1\123\12\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\2\4\1\124\24\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\11\4\1\125\15\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\6\4\1\126\20\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\2\4"+
    "\1\127\24\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\3\4\1\130\23\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\13\4\1\131\13\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\5\4\1\132\21\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\22\4"+
    "\1\133\4\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\2\4\1\134\24\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\5\4\1\135\21\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\12\4\1\136\14\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\3\4"+
    "\1\137\23\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\12\4\1\140\14\4\1\0\1\4\20\0\1\4"+
    "\4\53\1\141\1\0\1\110\52\53\1\0\2\4\4\0"+
    "\4\4\1\142\22\4\1\0\1\4\20\0\1\4\1\0"+
    "\2\4\4\0\15\4\1\143\11\4\1\0\1\4\20\0"+
    "\1\4\1\0\2\4\4\0\11\4\1\144\15\4\1\0"+
    "\1\4\20\0\1\4\1\0\2\4\4\0\13\4\1\145"+
    "\13\4\1\0\1\4\20\0\1\4\1\0\2\4\4\0"+
    "\17\4\1\146\7\4\1\0\1\4\20\0\1\4\1\0"+
    "\2\4\4\0\5\4\1\147\21\4\1\0\1\4\20\0"+
    "\1\4\1\0\2\4\4\0\26\4\1\150\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\21\4\1\151\5\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\14\4"+
    "\1\152\12\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\20\4\1\153\6\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\3\4\1\154\23\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\5\4\1\155\21\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\3\4"+
    "\1\156\23\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\1\4\1\157\25\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\20\4\1\160\6\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\20\4\1\161\6\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\5\4"+
    "\1\162\21\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\5\4\1\163\21\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\3\4\1\164\23\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\13\4\1\165\13\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\2\4"+
    "\1\166\24\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\5\4\1\167\21\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\5\4\1\170\21\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\12\4\1\171\14\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\2\4"+
    "\1\172\24\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\6\4\1\173\20\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\2\4\1\174\24\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\13\4\1\175\13\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\12\4"+
    "\1\176\14\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\20\4\1\177\6\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\3\4\1\200\23\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\21\4\1\201\5\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\20\4"+
    "\1\202\6\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\20\4\1\203\6\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\20\4\1\204\6\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\21\4\1\205\5\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\6\4"+
    "\1\206\20\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\20\4\1\207\6\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\13\4\1\210\13\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\16\4\1\211\10\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\13\4"+
    "\1\212\13\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\16\4\1\213\10\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\24\4\1\214\2\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\21\4\1\215\5\4"+
    "\1\0\1\4\20\0\1\4\1\0\2\4\4\0\6\4"+
    "\1\216\20\4\1\0\1\4\20\0\1\4\1\0\2\4"+
    "\4\0\1\4\1\217\25\4\1\0\1\4\20\0\1\4"+
    "\1\0\2\4\4\0\10\4\1\220\16\4\1\0\1\4"+
    "\20\0\1\4\1\0\2\4\4\0\26\4\1\221\1\0"+
    "\1\4\20\0\1\4\1\0\2\4\4\0\7\4\1\222"+
    "\17\4\1\0\1\4\20\0\1\4\1\0\2\4\4\0"+
    "\20\4\1\223\6\4\1\0\1\4\20\0\1\4\1\0"+
    "\2\4\4\0\21\4\1\224\5\4\1\0\1\4\20\0"+
    "\1\4\1\0\2\4\4\0\3\4\1\225\23\4\1\0"+
    "\1\4\20\0\1\4\1\0\2\4\4\0\27\4\1\226"+
    "\1\4\20\0\1\4\20\0\1\227\63\0\1\230\57\0"+
    "\1\231\74\0\1\232\35\0\1\233\66\0\1\234\50\0"+
    "\1\235\77\0\1\236\52\0\1\237\52\0\1\240\74\0"+
    "\1\241\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5635];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\20\1\6\11\2\1\11\11"+
    "\2\0\31\1\3\11\1\0\115\1\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Return new symbol objects with line and column numbers in the symbol 
  // left and right fields. This abuses the original idea of having left 
  // and right be character positions, but is   // is more useful and 
  // follows an example in the JFlex documentation.
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

 // Return a readable representation of symbol s (aka token)
  public String symbolToString(Symbol s) {
    String rep;
    switch (s.sym) {
            case sym.AND: return "AND";
		      case sym.BECOMES: return "BECOMES";
		      case sym.BOOLEAN: return "BOOLEAN";
		      case sym.CBRACKET: return "CBRACKET";
		      case sym.CKEY: return "CKEY";
		      case sym.CLASS: return "CLASS";
		      case sym.COMMA: return "COMMA";
		      case sym.DISPLAY: return "DISPLAY";
		      case sym.DIVIDE: return "DIVIDE";
		      case sym.DOT: return "DOT";
		      case sym.DOUBLE: return "DOUBLE";
		      case sym.ELSE: return "ELSE";
		      case sym.EOF: return "<EOF>";
		      case sym.error: return "<ERROR>";
		      case sym.EXTENDS: return "EXTENDS";
		      case sym.FALSE: return "FALSE";
		      case sym.FOR: return "FOR";
		      case sym.IDENTIFIER: return "ID(" + (String)s.value + ")";
		      case sym.IF: return "IF";
		      case sym.IMPORT: return "IMPORT";
		      case sym.INT: return "INT";
		      case sym.LENGTH: return "LENGTH";
		      case sym.LPAREN: return "LPAREN";
		      case sym.LTHAN: return "LTHAN";
		      case sym.MAIN: return "MAIN";
		      case sym.MINUS: return "MINUS";
		      case sym.MTHAN: return "MTHAN";
		      case sym.NEW: return "NEW";
		      case sym.NOT: return "NOT";
		      case sym.NULL: return "NULL";
		      case sym.NUMBERS: return "NUMBERS(" + String.valueOf(s.value) + ")";
		      case sym.OBRACKET: return "OBRACKET";
		      case sym.OKEY: return "OKEY";
		      case sym.OR: return "OR";
		      case sym.PLUS: return "PLUS";
		      case sym.PRIVATE: return "PRIVATE";
		      case sym.PUBLIC: return "PUBLIC";
		      case sym.RETURN: return "RETURN";
		      case sym.RPAREN: return "RPAREN";
		      case sym.SEMICOLON: return "SEMICOLON";
		      case sym.STATIC: return "STATIC";
		      case sym.STRING: return "STRING";
		      case sym.SYSTEMOUTPRINTLN: return "SYSTEMOUTPRINTLN";
		      case sym.THIS: return "THIS";
		      case sym.TIMES: return "TIMES";
		      case sym.TRUE: return "TRUE";
		      case sym.VOID: return "VOID";
		      case sym.WHILE: return "WHILE";
      		default: return "<UNEXPECTED TOKEN " + s.toString() + ">";
      
      
      
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* ignore whitespace */
          }
        case 50: break;
        case 35: 
          { return symbol(sym.CLASS);
          }
        case 51: break;
        case 2: 
          { return symbol(sym.NUMBERS, Integer.valueOf(yytext()));
          }
        case 52: break;
        case 15: 
          { return symbol(sym.RPAREN);
          }
        case 53: break;
        case 45: 
          { return symbol(sym.DISPLAY);
          }
        case 54: break;
        case 46: 
          { return symbol(sym.PRIVATE);
          }
        case 55: break;
        case 42: 
          { return symbol(sym.LENGTH);
          }
        case 56: break;
        case 26: 
          { return symbol(sym.INT);
          }
        case 57: break;
        case 13: 
          { return symbol(sym.NOT);
          }
        case 58: break;
        case 23: 
          { return symbol(sym.AND);
          }
        case 59: break;
        case 43: 
          { return symbol(sym.RETURN);
          }
        case 60: break;
        case 20: 
          { return symbol(sym.CBRACKET);
          }
        case 61: break;
        case 8: 
          { return symbol(sym.PLUS);
          }
        case 62: break;
        case 48: 
          { return symbol(sym.EXTENDS);
          }
        case 63: break;
        case 30: 
          { return symbol(sym.TRUE);
          }
        case 64: break;
        case 9: 
          { return symbol(sym.BECOMES);
          }
        case 65: break;
        case 12: 
          { return symbol(sym.MTHAN);
          }
        case 66: break;
        case 11: 
          { return symbol(sym.LTHAN);
          }
        case 67: break;
        case 32: 
          { return symbol(sym.VOID);
          }
        case 68: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 69: break;
        case 6: 
          { return symbol(sym.TIMES);
          }
        case 70: break;
        case 29: 
          { return symbol(sym.MAIN);
          }
        case 71: break;
        case 33: 
          { return symbol(sym.ELSE);
          }
        case 72: break;
        case 40: 
          { return symbol(sym.STATIC);
          }
        case 73: break;
        case 39: 
          { return symbol(sym.IMPORT);
          }
        case 74: break;
        case 36: 
          { return symbol(sym.WHILE);
          }
        case 75: break;
        case 38: 
          { return symbol(sym.DOUBLE);
          }
        case 76: break;
        case 22: 
          { return symbol(sym.IF);
          }
        case 77: break;
        case 14: 
          { return symbol(sym.LPAREN);
          }
        case 78: break;
        case 31: 
          { return symbol(sym.THIS);
          }
        case 79: break;
        case 24: 
          { return symbol(sym.OR);
          }
        case 80: break;
        case 1: 
          { System.err.println(
	"\nunexpected character in input: '" + yytext() + "' at line " +
	(yyline+1) + " column " + (yycolumn+1));
          }
        case 81: break;
        case 17: 
          { return symbol(sym.CKEY);
          }
        case 82: break;
        case 18: 
          { return symbol(sym.SEMICOLON);
          }
        case 83: break;
        case 28: 
          { return symbol(sym.FOR);
          }
        case 84: break;
        case 25: 
          { /* ignore comment */
          }
        case 85: break;
        case 10: 
          { return symbol(sym.MINUS);
          }
        case 86: break;
        case 27: 
          { return symbol(sym.NEW);
          }
        case 87: break;
        case 47: 
          { return symbol(sym.BOOLEAN);
          }
        case 88: break;
        case 19: 
          { return symbol(sym.OBRACKET);
          }
        case 89: break;
        case 16: 
          { return symbol(sym.OKEY);
          }
        case 90: break;
        case 44: 
          { return symbol(sym.STRING);
          }
        case 91: break;
        case 5: 
          { return symbol(sym.DIVIDE);
          }
        case 92: break;
        case 21: 
          { return symbol(sym.COMMA);
          }
        case 93: break;
        case 37: 
          { return symbol(sym.FALSE);
          }
        case 94: break;
        case 49: 
          { return symbol(sym.SYSTEMOUTPRINTLN);
          }
        case 95: break;
        case 41: 
          { return symbol(sym.PUBLIC);
          }
        case 96: break;
        case 7: 
          { return symbol(sym.DOT);
          }
        case 97: break;
        case 34: 
          { return symbol(sym.NULL);
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
